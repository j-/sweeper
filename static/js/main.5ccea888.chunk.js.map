{"version":3,"sources":["seed.ts","store/actions.ts","store/cell.ts","store/board.ts","store/index.ts","random.ts","components/Button.tsx","components/RestartButton.tsx","components/SettingsButton.tsx","components/NewGameMenu.tsx","components/NeighborMineCount.tsx","components/GameCellOpened.tsx","emoji.ts","components/GameCellUnopened.tsx","components/GameCell.tsx","components/GameBoard.tsx","components/GameStatus.tsx","components/Game.tsx","components/App.tsx","index.tsx"],"names":["create","String","Date","now","toggleSettings","show","type","data","open","cell","Object","objectSpread","opened","mine","mined","flag","flagged","INITIAL","neighborMineCount","initializeBoard","width","height","Array","fill","mapCellAtIndex","board","index","map","concat","toConsumableArray","slice","openCellAtIndex","mineCellAtIndex","getNeighborCoords","x","y","hasUp","hasDn","hasLe","hasRi","coords","push","getMaxMineCount","length","DEFAULT_STATE","showSettings","seed","mineCount","boardWidth","boardHeight","boardCells","isGameStarted","isGameOver","didWin","reducer","state","arguments","undefined","action","isActionSetBoardDimensions","_action$data","isActionOpenCell","_action$data2","getCellIndex","onlyMined","_ref","_ref2","slicedToArray","_loop","Math","floor","filter","calculateNeighborMineCounts","count","rand","Error","addMinesToBoard","seedrandom","expandCell","_step","_iterator","_createForOfIteratorHelper","s","n","done","_ref5","value","_ref4","err","e","f","every","isActionFlagCell","_action$data3","flagCellAtIndex","isActionRestartGame","isActionNewGame","_action$data4","rows","cols","mines","isActionSetSeed","isActionToggleSettings","isShowingSettings","getBoardWidth","getBoardHeight","getBoardDimensions","getBoardCells","isGameWon","getTotalMineCount","getRemainingMineCount","max","Boolean","getFlagCount","Button","props","react","assign","className","RestartButton","esm_extends","dispatch","useDispatch","handleClick","React","preventDefault","createSeed","restartGame","components_Button","onClick","SettingsButton","NewGameMenu","_React$useState","useSelector","_React$useState2","size","setSize","_React$useState3","_React$useState4","setMines","style","maxWidth","htmlFor","id","onChange","currentTarget","onBlur","newSize","min","Number","newGame","NeighborMineCount","GameCellOpened","src_components_NeighborMineCount","GameCellUnopened","onOpen","onFlag","children","tabIndex","onContextMenu","onMouseDown","onMouseUp","button","GameCell","src_components_GameCellOpened","src_components_GameCellUnopened","cancel","GameBoard","_useSelector","selectBoardDimensions","_useSelector2","cells","selectBoardCells","selectIsGameOver","gridTemplate","classNames","i","src_components_GameCell","key","openCell","flagCell","GameStatusWin","GameStatusLose","GameStatusInProgress","GameStatusGetStarted","GameStatus","isStarted","isOver","GameStatus_GameStatusWin","GameStatus_GameStatusLose","GameStatus_GameStatusInProgress","GameStatus_GameStatusGetStarted","Game","src_components_GameBoard","src_components_GameStatus","App","settings","components_RestartButton","components_SettingsButton","components_NewGameMenu","src_components_Game","store","createStore","rootReducer","composeWithDevTools","getState","setSeed","rootElement","document","getElementById","render","es","src_components_App"],"mappings":"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","file":"static/js/main.5ccea888.chunk.js","sourcesContent":["/** Creates a 'random' seed */\nexport const create = () => String(Date.now());\n","import { Action, ActionCreator } from 'redux';\nimport { create as createSeed } from '../seed';\n\nexport const ACTION_SET_BOARD_DIMENSIONS = 'SET_BOARD_DIMENSIONS';\n\nexport interface ActionSetBoardDimensions extends Action<typeof ACTION_SET_BOARD_DIMENSIONS> {\n  data: {\n    width: number;\n    height: number;\n  };\n}\n\nexport const isActionSetBoardDimensions = (action: Action): action is ActionSetBoardDimensions => (\n  action.type === ACTION_SET_BOARD_DIMENSIONS\n);\n\nexport const setBoardDimensions: ActionCreator<ActionSetBoardDimensions> = (width: number, height: number) => ({\n  type: ACTION_SET_BOARD_DIMENSIONS,\n  data: {\n    width,\n    height,\n  },\n});\n\nexport const ACTION_OPEN_CELL = 'OPEN_CELL';\n\nexport interface ActionOpenCell extends Action<typeof ACTION_OPEN_CELL> {\n  data: {\n    x: number;\n    y: number;\n  };\n}\n\nexport const isActionOpenCell = (action: Action): action is ActionOpenCell => (\n  action.type === ACTION_OPEN_CELL\n);\n\nexport const openCell: ActionCreator<ActionOpenCell> = (x: number, y: number) => ({\n  type: ACTION_OPEN_CELL,\n  data: {\n    x,\n    y,\n  },\n});\n\nexport const ACTION_FLAG_CELL = 'FLAG_CELL';\n\nexport interface ActionFlagCell extends Action<typeof ACTION_FLAG_CELL> {\n  data: {\n    x: number;\n    y: number;\n  };\n}\n\nexport const isActionFlagCell = (action: Action): action is ActionFlagCell => (\n  action.type === ACTION_FLAG_CELL\n);\n\nexport const flagCell: ActionCreator<ActionFlagCell> = (x: number, y: number) => ({\n  type: ACTION_FLAG_CELL,\n  data: {\n    x,\n    y,\n  },\n});\n\nexport const ACTION_RESTART_GAME = 'RESTART_GAME';\n\nexport interface ActionRestartGame extends Action<typeof ACTION_RESTART_GAME> {\n  data: {\n    seed: string;\n  };\n}\n\nexport const isActionRestartGame = (action: Action): action is ActionRestartGame => (\n  action.type === ACTION_RESTART_GAME\n);\n\nexport const restartGame: ActionCreator<ActionRestartGame> = (seed: string = createSeed()) => ({\n  type: ACTION_RESTART_GAME,\n  data: {\n    seed,\n  },\n});\n\nexport const ACTION_SET_SEED = 'SET_SEED';\n\nexport interface ActionSetSeed extends Action<typeof ACTION_SET_SEED> {\n  data: {\n    seed: string;\n  };\n}\n\nexport const isActionSetSeed = (action: Action): action is ActionSetSeed => (\n  action.type === ACTION_SET_SEED\n);\n\nexport const setSeed: ActionCreator<ActionSetSeed> = (seed: string = createSeed()) => ({\n  type: ACTION_SET_SEED,\n  data: {\n    seed,\n  },\n});\n\nexport const ACTION_NEW_GAME = 'NEW_GAME';\n\nexport interface ActionNewGame extends Action<typeof ACTION_NEW_GAME> {\n  data: {\n    rows: number;\n    cols: number;\n    mines: number;\n  };\n}\n\nexport const isActionNewGame = (action: Action): action is ActionNewGame => (\n  action.type === ACTION_NEW_GAME\n);\n\nexport const newGame: ActionCreator<ActionNewGame> = (rows: number, cols: number, mines: number) => ({\n  type: ACTION_NEW_GAME,\n  data: {\n    rows,\n    cols,\n    mines,\n  },\n});\n\nexport const ACTION_TOGGLE_SETTINGS = 'TOGGLE_SETTINGS';\n\nexport interface ActionToggleSettings extends Action<typeof ACTION_TOGGLE_SETTINGS> {\n  data: {\n    show: boolean;\n  };\n}\n\nexport const isActionToggleSettings = (action: Action): action is ActionToggleSettings => (\n  action.type === ACTION_TOGGLE_SETTINGS\n);\n\nexport const toggleSettings: ActionCreator<ActionToggleSettings> = (show: boolean) => ({\n  type: ACTION_TOGGLE_SETTINGS,\n  data: {\n    show,\n  },\n});\n\nexport const showSettings: ActionCreator<ActionToggleSettings> = () => toggleSettings(true);\nexport const hideSettings: ActionCreator<ActionToggleSettings> = () => toggleSettings(false);\n","export interface Cell {\r\n  /** Has the player clicked this cell? */\r\n  readonly opened: boolean;\r\n  /** Has a flag been set on this cell? */\r\n  readonly flagged: boolean;\r\n  /** Does this cell contain a mine? */\r\n  readonly mined: boolean;\r\n  /** How many neighbors are mines? */\r\n  readonly neighborMineCount: number;\r\n}\r\n\r\nexport const open = (cell: Cell): Cell => ({\r\n  ...cell,\r\n  opened: true,\r\n});\r\n\r\nexport const mine = (cell: Cell): Cell => ({\r\n  ...cell,\r\n  mined: true,\r\n});\r\n\r\nexport const flag = (cell: Cell): Cell => ({\r\n  ...cell,\r\n  flagged: !cell.flagged,\r\n});\r\n\r\nexport const INITIAL: Readonly<Cell> = {\r\n  opened: false,\r\n  flagged: false,\r\n  mined: false,\r\n  neighborMineCount: 0,\r\n};\r\n\r\nexport const MINE: Readonly<Cell> = mine(INITIAL);\r\n","import { Cell, INITIAL, open, mine, flag } from './cell';\nimport { getMaxMineCount } from '.';\n\nexport interface Board extends Array<Cell> {\n\n}\n\n/**\n * Creates a new empty board.\n */\nexport const initializeBoard = (width: number, height: number): Board => (\n  new Array<Cell>(width * height).fill(INITIAL)\n);\n\n/**\n * Returns a new board with the cell at the given index passed to a mapping\n * function and replaced.\n */\nconst mapCellAtIndex = (board: Board, index: number, map: (cell: Cell) => Cell): Board => [\n  ...board.slice(0, index),\n  map(board[index]),\n  ...board.slice(index + 1),\n];\n\n/**\n * Returns a new board with the cell at the given index opened.\n */\nexport const openCellAtIndex = (board: Board, index: number) => (\n  mapCellAtIndex(board, index, open)\n);\n\n/**\n * Returns a new board with the cell at the given index flagged/unflagged.\n */\nexport const flagCellAtIndex = (board: Board, index: number) => (\n  mapCellAtIndex(board, index, flag)\n);\n\n/**\n * Returns a new board with the cell at the given index mined.\n */\nexport const mineCellAtIndex = (board: Board, index: number) => (\n  mapCellAtIndex(board, index, mine)\n);\n\n/**\n * Places mines on the board randomly using the supplied RNG.\n */\nexport const addMinesToBoard = (board: Board, count: number, rand: () => number) => {\n  const { length } = board;\n  if (count > getMaxMineCount(length)) {\n    throw new Error('Too many mines');\n  }\n  while (true) {\n    const index = Math.floor(rand() * length);\n    const cell = board[index];\n    // This is the cell the player just clicked, skip it\n    if (cell.opened) continue;\n    // Cell already has a mine from a previous iter, skip it\n    if (cell.mined) continue;\n    // Place a mine at the current cell\n    board = mineCellAtIndex(board, index);\n    // All mines have been added, exit\n    if (--count <= 0) break;\n  }\n  return board;\n};\n\n/**\n * Returns an array of (x, y) coordinate pairs, each representing the\n * coordinates of the given cell -- taking into account the boundaries if the\n * board.\n */\nexport const getNeighborCoords = (width: number, height: number, x: number, y: number): [number, number][] => {\n  const hasUp = y > 0 && height > 1;\n  const hasDn = y < height - 1 && height > 1;\n  const hasLe = x > 0 && width > 1;\n  const hasRi = x < width - 1 && width > 1;\n  const coords: [number, number][] = [];\n  if (hasUp && hasLe) coords.push([x - 1, y - 1]);\n  if (hasUp) coords.push([x, y - 1]);\n  if (hasUp && hasRi) coords.push([x + 1, y - 1]);\n  if (hasLe) coords.push([x - 1, y]);\n  if (hasRi) coords.push([x + 1, y]);\n  if (hasDn && hasLe) coords.push([x - 1, y + 1]);\n  if (hasDn) coords.push([x, y + 1]);\n  if (hasDn && hasRi) coords.push([x + 1, y + 1]);\n  return coords;\n};\n\n/**\n * For each cell on this board calculate how many neighbors are mined.\n * Returns a new board with each cell containing a neighbor mine count.\n */\nexport const calculateNeighborMineCounts = (board: Board, width: number, height: number) => {\n  const onlyMined = ([x, y]: [number, number]) => board[x + y * height].mined;\n  for (let index = 0; index < board.length; index++) {\n    const x = index % width;\n    const y = Math.floor(index / width);\n    const neighborMineCount = (\n      // Iterate over all neighbors of this cell\n      getNeighborCoords(width, height, x, y)\n        // Filter out all neighbors without mines\n        .filter(onlyMined)\n        // Count the mined neighbors\n        .length\n    );\n    board = mapCellAtIndex(board, index, (cell) => ({\n      ...cell,\n      neighborMineCount,\n    }));\n  }\n  return board;\n};\n\n/**\n * Recursively expand this cell and all of its neighbors if appropriate.\n */\nexport const expandCell = (board: Board, width: number, height: number, x: number, y: number) => {\n  const index = x + y * width;\n  const cell = board[index];\n  board = openCellAtIndex(board, index);\n  if (cell.neighborMineCount > 0) {\n    return board;\n  }\n  const neighbors = getNeighborCoords(width, height, x, y);\n  for (const [x, y] of neighbors) {\n    const index = x + y * width;\n    const cell = board[index];\n    if (!cell.flagged && !cell.opened) {\n      board = expandCell(board, width, height, x, y);\n    }\n  }\n  return board;\n};\n\n/**\n * Returns true if the mines in this board are totally swept.\n */\nexport const calculateDidWin = (board: Board) => {\n  return board.every((cell) => (\n    // Cell must be mined OR opened\n    // Cell cannot be mined AND opened\n    (cell.mined || cell.opened) && cell.mined !== cell.opened\n  ));\n};\n","import { Reducer, AnyAction } from 'redux';\nimport { isActionSetBoardDimensions, isActionOpenCell, isActionFlagCell, isActionRestartGame, isActionSetSeed, isActionNewGame, isActionToggleSettings } from './actions';\nimport { create } from '../random';\nimport {\n  Board,\n  initializeBoard,\n  openCellAtIndex,\n  addMinesToBoard,\n  flagCellAtIndex,\n  calculateNeighborMineCounts,\n  expandCell,\n  calculateDidWin,\n} from './board';\n\nexport interface RootReducerState {\n  showSettings: boolean;\n  seed: string;\n  mineCount: number;\n  boardWidth: number;\n  boardHeight: number;\n  boardCells: Board;\n  isGameStarted: boolean;\n  isGameOver: boolean;\n  didWin: boolean;\n}\n\nexport const DEFAULT_COUNT = 20;\nexport const DEFAULT_WIDTH = 12;\nexport const DEFAULT_HEIGHT = 12;\nexport const DEFAULT_SEED = 'DEFAULT_SEED';\n\nexport const MIN_ROWS = 5;\nexport const MIN_COLS = 5;\nexport const MAX_ROWS = 20;\nexport const MAX_COLS = 20;\nexport const MIN_COUNT = 1;\n\nexport function getMaxMineCount (length: number) {\n  return length - 2;\n}\n\nconst DEFAULT_STATE: RootReducerState = {\n  showSettings: false,\n  seed: DEFAULT_SEED,\n  mineCount: DEFAULT_COUNT,\n  boardWidth: DEFAULT_WIDTH,\n  boardHeight: DEFAULT_HEIGHT,\n  boardCells: initializeBoard(DEFAULT_WIDTH, DEFAULT_HEIGHT),\n  isGameStarted: false,\n  isGameOver: false,\n  didWin: false,\n};\n\nconst reducer: Reducer<RootReducerState, AnyAction> = (state = DEFAULT_STATE, action) => {\n  if (isActionSetBoardDimensions(action)) {\n    const { width: boardWidth, height: boardHeight } = action.data;\n    return {\n      ...state,\n      boardWidth,\n      boardHeight,\n      boardCells: initializeBoard(boardWidth, boardHeight),\n      isGameStarted: false,\n      isGameOver: false,\n      didWin: false,\n    };\n  }\n\n  if (isActionOpenCell(action)) {\n    const { x, y } = action.data;\n    const index = getCellIndex(state, x, y);\n    let { boardCells, isGameOver, isGameStarted, didWin } = state;\n    if (isGameOver) {\n      // Game's already over, exit early\n      return state;\n    }\n    const cell = boardCells[index];\n    // Step 0: Only continue if cell is not flagged or opened\n    if (cell.flagged || cell.opened) {\n      return state;\n    }\n    const { seed, mineCount, boardWidth, boardHeight } = state;\n    // Step 1: Open the cell where the player clicked\n    boardCells = openCellAtIndex(boardCells, index);\n    if (!isGameStarted) {\n      isGameStarted = true;\n      // Step 2: Add mines randomly to initialize the board\n      boardCells = addMinesToBoard(boardCells, mineCount, create(seed));\n      // Step 3: Calculate neighbor counts\n      boardCells = calculateNeighborMineCounts(boardCells, boardWidth, boardHeight);\n    } else if (cell.mined) {\n      // Game is over if the player clicks on a mine\n      isGameOver = true;\n    }\n    if (!cell.mined) {\n      // Step 4: Expand all neighbor cells if required\n      boardCells = expandCell(boardCells, boardWidth, boardHeight, x, y);\n    }\n    // Step 5: Determine if the player won\n    didWin = calculateDidWin(boardCells);\n    isGameOver = isGameOver || didWin;\n    return {\n      ...state,\n      boardCells,\n      isGameStarted,\n      isGameOver,\n      didWin,\n    };\n  }\n\n  if (isActionFlagCell(action)) {\n    const { x, y } = action.data;\n    const { isGameOver } = state;\n    if (isGameOver) {\n      return state;\n    }\n    let { boardCells } = state;\n    const index = getCellIndex(state, x, y);\n    boardCells = flagCellAtIndex(boardCells, index);\n    return {\n      ...state,\n      boardCells,\n    };\n  }\n\n  if (isActionRestartGame(action)) {\n    return {\n      ...state,\n      seed: action.data.seed,\n      boardCells: initializeBoard(state.boardWidth, state.boardHeight),\n      isGameStarted: false,\n      isGameOver: false,\n      didWin: false,\n    };\n  }\n\n  if (isActionNewGame(action)) {\n    const { rows: boardHeight, cols: boardWidth, mines: mineCount } = action.data;\n    return {\n      ...state,\n      boardWidth,\n      boardHeight,\n      mineCount,\n      showSettings: false,\n      boardCells: initializeBoard(boardWidth, boardHeight),\n      isGameStarted: false,\n      isGameOver: false,\n      didWin: false,\n    };\n  }\n\n  if (isActionSetSeed(action)) {\n    return {\n      ...state,\n      seed: action.data.seed,\n    };\n  }\n\n  if (isActionToggleSettings(action)) {\n    return {\n      ...state,\n      showSettings: action.data.show,\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;\n\nexport const isShowingSettings = (state: RootReducerState): boolean => state.showSettings;\nexport const hasSeed = (state: RootReducerState): boolean => state.seed !== DEFAULT_SEED;\nexport const getBoardWidth = (state: RootReducerState): number => state.boardWidth;\nexport const getBoardHeight = (state: RootReducerState): number => state.boardHeight;\nexport const getBoardDimensions = (state: RootReducerState): Readonly<[number, number]> => [state.boardWidth, state.boardHeight];\nexport const getBoardCells = (state: RootReducerState): Readonly<Board> => state.boardCells;\nexport const getCellIndex = (state: RootReducerState, x: number, y: number): number => state.boardWidth * y + x;\nexport const isGameStarted = (state: RootReducerState): boolean => state.isGameStarted;\nexport const isGameOver = (state: RootReducerState): boolean => state.isGameOver;\nexport const isGameWon = (state: RootReducerState): boolean => state.didWin;\nexport const getTotalMineCount = (state: RootReducerState): number => state.mineCount;\nexport const getFlagCount = (state: RootReducerState): number => state.boardCells.map((cell) => cell.flagged).filter(Boolean).length;\nexport const getRemainingMineCount = (state: RootReducerState): number => Math.max(0, getTotalMineCount(state) - getFlagCount(state));\n","import seedrandom from 'seedrandom';\r\n\r\nexport type Random = () => number;\r\n\r\nexport const create = (seed?: string): Random => seedrandom(seed);\r\n","import * as React from 'react';\n\nexport interface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\nconst Button: React.FC<Props> = (props) => (\n  <button type=\"button\" className=\"btn btn-light\" {...props} />\n);\n\nexport default Button;\n","import * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { restartGame } from '../store/actions';\nimport Button, { Props as ButtonProps } from './Button';\n\nexport type Props = ButtonProps;\n\nconst RestartButton: React.FC<Props> = ({ ...props }) => {\n  const dispatch = useDispatch();\n  const handleClick = React.useCallback<React.MouseEventHandler>((e) => {\n    e.preventDefault();\n    dispatch(restartGame());\n  }, [dispatch]);\n  return <Button onClick={handleClick} {...props} />;\n}\n\nexport default RestartButton;\n","import * as React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { showSettings } from '../store/actions';\r\nimport Button, { Props as ButtonProps } from './Button';\r\n\r\nexport type Props = ButtonProps;\r\n\r\nconst SettingsButton: React.FC<Props> = ({ ...props }) => {\r\n  const dispatch = useDispatch();\r\n  const handleClick = React.useCallback<React.MouseEventHandler>((e) => {\r\n    e.preventDefault();\r\n    dispatch(showSettings());\r\n  }, [dispatch]);\r\n  return <Button onClick={handleClick} {...props} />;\r\n}\r\n\r\nexport default SettingsButton;\r\n","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getBoardWidth, getTotalMineCount, MIN_ROWS, MAX_ROWS, MIN_COUNT, getMaxMineCount } from '../store';\nimport { newGame, hideSettings } from '../store/actions';\nimport Button from './Button';\n\nconst NewGameMenu: React.FC = () => {\n  const dispatch = useDispatch();\n  const [size, setSize] = React.useState<string>(String(useSelector(getBoardWidth)));\n  const [mines, setMines] = React.useState<string>(String(useSelector(getTotalMineCount)));\n  const handleChangeSize: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const { value } = e.currentTarget;\n    setSize(value || '');\n  };\n  const handleChangeMines: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const { value } = e.currentTarget;\n    setMines(value || '');\n  };\n  const handleBlurSize = () => {\n    const newSize = Math.max(MIN_ROWS, Math.min(MAX_ROWS, Number(size) || 0));\n    setSize(String(newSize));\n    setMines(String(Math.max(MIN_COUNT, Math.min(getMaxMineCount(Number(newSize) * Number(newSize)), Number(mines)))));\n  };\n  const handleBlurMines = () => {\n    setMines(String(Math.max(MIN_COUNT, Math.min(getMaxMineCount(Number(size) * Number(size)), Number(mines)))));\n  };\n  const handleClickNewGame: React.MouseEventHandler = (e) => {\n    e.preventDefault();\n    dispatch(newGame(size, size, mines));\n  };\n  const handleClickCancel: React.MouseEventHandler = (e) => {\n    e.preventDefault();\n    dispatch(hideSettings());\n  };\n  return (\n    <div className=\"NewGameMenu card card-body\" style={{ maxWidth: '20em' }}>\n      <div className=\"form-group\">\n        <label htmlFor=\"NewGameMenu-size\">Size</label><br />\n        <input id=\"NewGameMenu-size\" className=\"form-control\" type=\"number\" value={size} onChange={handleChangeSize} onBlur={handleBlurSize} />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"NewGameMenu-mines\">Mines</label><br />\n        <input id=\"NewGameMenu-mines\" className=\"form-control\" type=\"number\" value={mines} onChange={handleChangeMines} onBlur={handleBlurMines} />\n      </div>\n      <div>\n        <Button onClick={handleClickCancel}>\n          Cancel\n        </Button>{' '}\n        <Button className=\"btn btn-primary\" onClick={handleClickNewGame}>\n          Start game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default NewGameMenu;\n","import * as React from 'react';\nimport './NeighborMineCount.css';\n\nexport interface Props {\n  count: number;\n}\n\nconst NeighborMineCount: React.FC<Props> = ({ count }) => (\n  <span className={`NeighborMineCount NeighborMineCount--${count}`}>\n    {count}\n  </span>\n);\n\nexport default NeighborMineCount;\n","import * as React from 'react';\r\nimport { EXPLOSION } from '../emoji';\r\nimport { Cell } from '../store/cell';\r\nimport NeighborMineCount from './NeighborMineCount';\r\nimport './GameCellOpened.css';\r\n\r\nexport interface Props {\r\n  cell: Cell;\r\n}\r\n\r\nconst GameCellOpened: React.FC<Props> = ({ cell }) => (\r\n  <div className=\"GameCellOpened\">\r\n    <span className=\"GameCellOpened-content\">\r\n      {\r\n        cell.mined ? EXPLOSION :\r\n        cell.neighborMineCount > 0 ? <NeighborMineCount count={cell.neighborMineCount} /> :\r\n        null\r\n      }\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default GameCellOpened;\r\n","export const BOMB = '💣';\n\nexport const EXPLOSION = '💥';\n\nexport const FLAG = '🚩';\n","import * as React from 'react';\r\nimport { BOMB, FLAG, EXPLOSION } from '../emoji';\r\nimport { Cell } from '../store/cell';\r\nimport './GameCellUnopened.css';\r\n\r\nexport interface Props {\r\n  cell?: Cell | null;\r\n  onOpen: () => void;\r\n  onFlag: () => void;\r\n}\r\n\r\nconst GameCellUnopened: React.FC<Props> = ({ cell, onOpen, onFlag, children }) => (\r\n  <button\r\n    className=\"GameCellUnopened\"\r\n    type=\"button\"\r\n    tabIndex={-1}\r\n    onContextMenu={(e) => {\r\n      e.preventDefault();\r\n      onFlag();\r\n    }}\r\n    onMouseDown={(e) => {\r\n      e.preventDefault();\r\n    }}\r\n    onMouseUp={(e) => {\r\n      e.preventDefault();\r\n      if (e.button !== 2) onOpen();\r\n    }}\r\n  >\r\n    {\r\n      cell ? (\r\n        // Flag was placed correctly\r\n        cell.flagged && cell.mined ? FLAG :\r\n        // Flag was placed incorrectly\r\n        cell.flagged && !cell.mined ? EXPLOSION :\r\n        // Mine was not flagged\r\n        !cell.flagged && cell.mined ? BOMB :\r\n        // Cell was not mined or flagged\r\n        null\r\n      ) : children\r\n    }\r\n  </button>\r\n);\r\n\r\nexport default GameCellUnopened;\r\n","import * as React from 'react';\r\nimport { FLAG } from '../emoji';\r\nimport { Cell } from '../store/cell';\r\nimport GameCellOpened from './GameCellOpened';\r\nimport GameCellUnopened from './GameCellUnopened';\r\nimport './GameCell.css';\r\n\r\nexport interface Props {\r\n  isGameOver: boolean;\r\n  cell: Cell;\r\n  onOpen: () => void;\r\n  onFlag: () => void;\r\n}\r\n\r\nconst GameCell: React.FC<Props> = ({ isGameOver, cell, onOpen, onFlag }) => (\r\n  <div className=\"GameCell\">\r\n    {\r\n      cell.opened ?\r\n        <GameCellOpened cell={cell} /> :\r\n        <GameCellUnopened cell={isGameOver ? cell : null} onOpen={onOpen} onFlag={onFlag}>\r\n          {cell.flagged ? FLAG : null}\r\n        </GameCellUnopened>\r\n    }\r\n  </div>\r\n);\r\n\r\nexport default GameCell;\r\n","import * as React from 'react';\r\nimport classNames from 'classnames';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { openCell, flagCell } from '../store/actions';\r\nimport {\r\n  getBoardDimensions as selectBoardDimensions,\r\n  getBoardCells as selectBoardCells,\r\n  isGameOver as selectIsGameOver,\r\n} from '../store';\r\nimport GameCell from './GameCell';\r\nimport './GameBoard.css';\r\n\r\nconst cancel: React.MouseEventHandler = (e) => e.preventDefault();\r\n\r\nconst GameBoard: React.FC = () => {\r\n  const [width, height] = useSelector(selectBoardDimensions);\r\n  const cells = useSelector(selectBoardCells);\r\n  const isGameOver = useSelector(selectIsGameOver);\r\n  const dispatch = useDispatch();\r\n  const children: JSX.Element[] = [];\r\n  const gridTemplate = `repeat(${height}, 1fr) / repeat(${width}, 1fr)`;\r\n  const className = classNames('GameBoard', isGameOver && 'GameBoard--is-game-over');\r\n  for (let i = 0; i < width * height; i++) {\r\n    const cell = cells[i];\r\n    const x = i % width;\r\n    const y = Math.floor(i / width);\r\n    children.push(\r\n      <GameCell key={i} isGameOver={isGameOver} cell={cell} onOpen={() => dispatch(openCell(x, y))} onFlag={() => dispatch(flagCell(x, y))} />\r\n    );\r\n  }\r\n  return (\r\n    <div className={className} style={{ gridTemplate }} onContextMenu={cancel}>\r\n      {children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default GameBoard;\r\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { isGameStarted, isGameOver, getRemainingMineCount, isGameWon } from '../store';\nimport './GameStatus.css';\n\nconst GameStatusWin: React.FC = () => (\n  <p>You win</p>\n);\n\nconst GameStatusLose: React.FC = () => (\n  <p>You lose</p>\n);\n\nconst GameStatusInProgress: React.FC = () => (\n  <p>Mines: {useSelector(getRemainingMineCount)}</p>\n);\n\nconst GameStatusGetStarted: React.FC = () => (\n  <p>Click any cell to start game</p>\n);\n\nconst GameStatus: React.FC = () => {\n  const isStarted = useSelector(isGameStarted);\n  const isOver = useSelector(isGameOver);\n  const didWin = useSelector(isGameWon);\n\n  return (\n    <div className=\"GameStatus\">\n      {\n        didWin ? <GameStatusWin /> :\n        isOver ? <GameStatusLose /> :\n        isStarted ? <GameStatusInProgress /> :\n        <GameStatusGetStarted />\n      }\n    </div>\n  );\n};\n\nexport default GameStatus;\n","import * as React from 'react';\r\nimport GameBoard from './GameBoard';\r\nimport GameStatus from './GameStatus';\r\nimport { useSelector } from 'react-redux';\r\nimport { getBoardWidth, getBoardHeight } from '../store';\r\nimport './Game.css';\r\n\r\nconst Game: React.FC = () => {\r\n  const boardWidth = useSelector(getBoardWidth);\r\n  const boardHeight = useSelector(getBoardHeight);\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className=\"Game-board mt-4 mb-4\" style={{ width: 40 * boardWidth, height: 40 * boardHeight }}>\r\n        <GameBoard />\r\n      </div>\r\n      <GameStatus />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import * as React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport RestartButton from './RestartButton';\r\nimport SettingsButton from './SettingsButton';\r\nimport NewGameMenu from './NewGameMenu';\r\nimport { isShowingSettings } from '../store';\r\nimport Game from './Game';\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n  const settings = useSelector(isShowingSettings);\r\n  return (\r\n    <div className=\"App container pt-5 pb-5\">\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <RestartButton className=\"btn btn-dark mr-auto\">New game</RestartButton>\r\n        <SettingsButton className=\"btn btn-light ml-1\">Options</SettingsButton>\r\n      </nav>\r\n      <div className=\"d-flex flex-column align-items-center\">\r\n        {settings && (\r\n          <div className=\"mt-4 mb-4\">\r\n            <NewGameMenu />\r\n          </div>\r\n        )}\r\n        {!settings && (\r\n          <Game />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { createStore } from 'redux';\nimport rootReducer, { hasSeed } from './store';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { setSeed } from './store/actions';\nimport { Provider as StoreProvider } from 'react-redux';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles.css';\n\n// See: https://news.ycombinator.com/item?id=20522307\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nif (!hasSeed(store.getState())) {\n  store.dispatch(setSeed())\n}\n\nconst rootElement = document.getElementById('root');\nrender(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  rootElement\n);\n"],"sourceRoot":""}